<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!--
    namespace:名称空间
-->
<mapper namespace="com.HEART.mapper.BrandMapper">

    <!--
        id：完成主键的映射
          colum：表的别名
          property：实体类的属性名
        result：完成主键的映射
          colum：表的别名
          property：实体类的属性名
    -->
    <!--
        1.定义resultmap标签
        2.在< select >标签中使用resultmap属性替换resulttype属性v
    -->
    <resultMap id="brandResultMap" type="brand">
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name,company_name,ordered,description,status)
        values(#{brandName},#{companyName},#{ordered},#{description},#{status});
    </insert>
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name =#{companyName},
            </if>
            <if test="ordered != null and ordered != ''">
                ordered =#{ordered},
            </if>
            <if test="description != null and description != ''">
                description=#{description},
            </if>
            <if test="status != null">
                status=#{status}
            </if>
        </set>
        where id=#{id};
    </update>
    <delete id="deleteById">
        delete from tb_brand where id = #{id};
    </delete>
<!--    Mybatis会将数组参数封装为一个Map集合
        *默认：arr=数组
        *param注解改变map集合的默认key的名称
        -->
    <delete id="deleteByIds">
        delete from tb_brand where id
        in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
        ;
    </delete>

    <select id="selectAll" resultMap="brandResultMap">
        select
        *
        from tb_brand;

    </select>
    <!--
        *参数占位符：
            1.#{}:会将其替换为？，为了防止sql注入
            2.${}:拼sql，会存在sql注入问题
    -->
    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand where id = #{id};
    </select>

    <!--
        条件查询
    -->
    <!--    <select id="selectByCondition" resultMap="brandResultMap">-->
    <!--        select *-->
    <!--        from tb_brand-->
    <!--        where-->
    <!--            status = #{status}-->
    <!--        and company_name like #{companyName}-->
    <!--        and brand_name like #{brandName}-->
    <!--    </select>-->

    <!--
        动态条件查询
            *if : 条件判断
                *test：逻辑表达式
            *问题：
                *恒等式
                *where标签
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>
    <!--    单条件查询-->
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose><!--相当于switch-->
                <when test="status != null"><!--相当于case-->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''"><!--相当于case-->
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''"><!--相当于case-->
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>
    </select>
</mapper>